[
  {
    "objectID": "posts/r_grammar_experiment/index.html",
    "href": "posts/r_grammar_experiment/index.html",
    "title": "An R grammar experiment",
    "section": "",
    "text": "This post was originally published as a Twitter thread.\nRecently I was travelling on a plane without WiFi and so I decided to play with the R source code, which I already had on my laptop. I started experimenting with the file src/main/gram.y, which defines R’s language syntax using rules listed in a variant of Backus-Naur Form.\nI added some new rules to the grammar that adds a different way to invoke R functions. The new syntax looks like XML, and it feels really weird to use functions in this way.\n\n\n\nInvoking functions in the style of XML tags.\n\n\nI set it up so that multiple arguments are space separated child nodes, and named arguments can be added as XML attributes. So, functions with multiple arguments can still be invoked using this strange method. I also made it so R expressions wrapped in curly braces are evaluated.\n\n\n\nNested function invocation and named arguments.\n\n\nWhy was I creating this monster? Well, I was thinking of JSX - a fun extension to JavaScript that allows you to manipulate XML components directly in the JSX source. With this hack, you can almost do the same thing with Shiny and write the UI in HTML. Kinda neat, right?\n\n\n\nA Shiny app, written in a JSX-style using this grammar hack.\n\n\nSo, is this useful in any way? No, probably not. The hack is direct to the R source and I doubt R packages could make this kind of change. So even if you really wanted to do it, you’d have to run a patched version of R. A fun little experiment in writing BNF rules, though."
  },
  {
    "objectID": "posts/hyperbolic_fractals/index.html",
    "href": "posts/hyperbolic_fractals/index.html",
    "title": "Hyperbolic fractals",
    "section": "",
    "text": "To skip the maths and play with an interactive fractal browser, click here!\n\nThe Mandelbrot Set\n\nThe Mandelbrot set is probably one of the most famous fractals, known for its self-similar deep zooms and often demonstrated as an example of mathematical beauty.\n\n\n\n\n\n\n\nThe Mandelbrot set smoothly coloured by iteration.\n\n\n\n\n\n\n\nA partial zoomed view of the Mandelbrot set at coordinates (-0.7436,0.1314).\nBoth images generated by Wolfgang Beyer.\n\n\n\n\n\nMathematically, the Mandelbrot set is the set of values \\(c\\in\\mathbb{C}\\) for which the absolute value of the terms in the sequence, \\[z_0=0,\\quad z_{n+1} = z_n^2 + c,\\tag{1} \\] doesn’t fly off to infinity. Equation \\((1)\\) is known as the orbit function for the Mandelbrot set. For example, when \\(c=1\\), the sequence reads \\(z_n = 0, 1, 2, 5, 26, \\dots\\) This sequence in this particular case tends towards infinity and so \\(c=1\\) is not in the Mandelbrot set.\nOne can display all the points in the set on a complex plane to see a basic plot of the famous Mandelbrot shape, but normally a plot is instead produced of the number of iterations before \\(|z_n|\\) is greater than some threshold value. In the above images the iteration count is further smoothed using some extra mathematical tricks.\n\n\nInterpreting the Process Geometrically\nWhen plotting the Mandelbrot set we are associating complex values to points in the 2D plane. The Cartesian coordinates associated with a point \\(z\\) are \\((z_x, z_y)\\), with \\[ z = z_x + iz_y, \\] but an equivalent way of associating \\(z\\) to a point in the plane is by using 2D polar coordinates \\((z_r,z_\\theta)\\), with \\[ z = z_re^{iz_\\theta}.\\] Here \\(z_r\\) is the distance from the origin to the point and \\(z_\\theta\\) is the angle of the point in relation to the \\(x\\) axis. The two systems are related by, \\[ z_x = z_r\\cos(z_\\theta),\\quad z_y=z_r\\sin(z_\\theta). \\tag{2} \\] We can use the Cartesian and polar coordinate systems shown in Equation \\((2)\\) to reinterpret the operations used in Equation \\((1)\\) geometrically.\nFirst, consider the addition operation. This is easily understood by writing the operation in Cartesian form, \\[z + c \\rightarrow (z_x + c_x, z_y+c_y).\\]\nGeometrically, the operation has the effect of translating the point in the \\(x\\) direction by a distance of \\(c_x\\) and in the \\(y\\) direction by a distance of \\(c_y\\). Note that another geometric way of getting to the same point is by first rotating the point associated with \\(z\\) about the origin by \\(-c_\\theta\\), translating it in the \\(x\\) direction by \\(c_r\\), and then finally rotating back about the origin by \\(c_\\theta\\).\nNow consider the operation \\(z^2 = z \\cdot z\\). Rewriting the complex number \\(z\\) in 2D polar form and then simplifying, \\[ z^2 = z_re^{iz_\\theta} \\cdot z_re^{iz_\\theta} = z_r^2e^{i2z_\\theta}. \\] This is still in polar form and shows that the operation \\(z^2\\) takes the point associated with \\(z\\), rotates it about the origin by \\(z_\\theta\\), and then dilates by \\(z_r\\) so that the distance of the point from the origin is squared. Again, there is an alternative geometric method to get to the same point: First take the origin point, translate it in the \\(x\\) direction by \\(z_r^2\\) and then rotate around the origin by \\(2z_\\theta\\).\nUsing the alternative interpretations above, we can think of Equation \\((1)\\) as a set of translations along \\(x\\) and rotations around the origin. Given a value for \\(z\\) and \\(c\\) we can calculate the result of applying Equation \\((1)\\) by finding the complex value associated with the point obtained by applying the following geometric process:\n\nTake the origin point and translate it by \\(z_r^2\\) in the \\(x\\) direction.\nRotate around the origin by \\(2z_\\theta-c_\\theta\\).\nTranslate by \\(c_r\\) in the \\(x\\) direction.\nRotate around the origin by \\(c_\\theta\\).\n\n\nLater, we will use a similar geometric process to define a hyperbolic version of Equation \\((1)\\), set in curved space rather than the standard flat Euclidean space. Since the overall structure of the Mandelbrot set results from the algebra of the complex numbers that we are mimicking with a geometric process, things should not look super different, but with in curved space moving around and zooming into details should at least look fairly interesting.\n\n\n\nHyperbolic Space\nHyperbolic n-space, denoted \\(\\mathbf{H}^n\\), is a homogeneous space that has a constant negative curvature. Curvature here specifically means Gaussian curvature intrinsic to the surface and is a measure of how much geometric objects and operations on the surface deviates from the behaviour in flat space (zero curvature).\n\n\n\nExamples of different types of Gaussian curvature. Image created by Science4All\n\n\n\nTo visualise curved space we need to be able to somehow convert it for display in 2D or 3D Euclidean space, so that it can be sensibly displayed on your screen. However, Hilbert’s theorem says that we can’t embed even a small part of hyperbolic space into 3D Euclidean space due to its constant negative curvature. Luckily, there are several so-called models of hyperbolic space that we can use instead. These models are simply different ways of expressing the structure of hyperbolic space mathematically. We will be using two models: our main calculations will be made in the Hyperboloid Model and we will visualise the result later using the Poincaré Disc Model.\n\n\nThe Hyperboloid Model\n\n\nThe Hyperboloid Model is a model of n-dimensional hyperbolic geometry in which points are associated with points on a hyperboloid surface living in an (n+1)-dimensional non-Euclidean space. A hyperbolic distance function is defined on the surface so that hyperbolic geometry is preserved.\n\n\nOften Minkowski space is used here due to its useful applications in the theory of special relativity. However, I will instead use Lorentz space. It is essentially the same — the coordinates are just re-ordered and some signs are flipped. It doesn’t change the behaviour of the space but does avoid references to physical “time-like” and “space-like” dimensions.\n\n\nWe begin defining Lorentz space by writing down an inner product. For vectors \\(\\mathbf{u}\\) and \\(\\mathbf{v}\\) in \\(\\mathbb{R}^d\\) the Lorentzian inner product is, \\[\\mathbf{u} \\cdot \\mathbf{v} = u_1v_1 + u_2v_2 + \\dots - u_dv_d.\\] This looks very similar to the standard Euclidean inner product expect for the subtraction of the final components. This definition is valid for any vectors \\(\\mathbb{R}^d\\) but we’ll only really consider the case when \\(d=3\\) and denote that space as \\(\\mathbb{L}^{2,1}\\), Lorentz (2,1)-space. Following on from the inner product, we can define both the Lorenz norm and Lorentz distance between two vectors,\\[ ||\\mathbf{u}|| = \\sqrt{\\mathbf{u} \\cdot \\mathbf{u}}, \\] \\[ d_L(\\mathbf{u},\\mathbf{v}) = || \\mathbf{u} - \\mathbf{v} ||. \\]\n\n\nNow, to recreate the geometry of hyperbolic space we need a surface, \\(\\mathcal{H}\\), with constant negative curvature. A sphere with radius \\(r\\) can be shown to have a curvature of \\(\\kappa = \\frac{1}{r^2}\\), so if we could somehow construct a sphere with a radius of \\(r = \\sqrt{-1}\\), we would immediately satisfy our requirements. In analogy to the definition of an n-sphere in Euclidean space we form our surface, \\[\\mathcal{H} =\\{\\mathbf{u} \\in \\mathbb{L}^{2,1} : ||\\mathbf{u}|| = i\\}.\\]\n\n\nIn Euclidean space this is impossible, but as it turns out such a sphere can exist in \\(\\mathbb{L}^{2,1}\\) consisting of all the points \\(\\mathbf{u}\\) satisfying the equation \\(u_1^2+u_2^2-u_3^2 = -1.\\) Back in Euclidean space, this is a two-sheeted hyperboloid and we choose to define our hyperboloid model on the positive sheet only, with \\(u_3&gt;0.\\)\n\n\n\n\n\n\n\nA two-sheeted hyperbolid visualised in 3D Euclidean space. Created by Lars H. Rohwedder.\n\n\n\n\n\n\n\nThe hyperboloid model showing red geodesics, which can be thought of as generalised “straight lines” on the surface. Created by Brice Loustau\n\n\n\n\n\nThe last piece needed to ensure hyperbolic geometry is enforced on the surface of \\(\\mathcal{H}\\) is a hyperbolic distance function, which we define as \\[d_\\mathcal{H}(\\mathbf{u},\\mathbf{v}) = \\mathop{\\text{arccosh}\n}(-\\mathbf{u} \\cdot \\mathbf{v}),\\] so that for any vectors \\(\\mathbf{u},\\mathbf{v} \\in \\mathcal{H}\\), \\[\\mathbf{u}\\cdot \\mathbf{v} = ||\\mathbf{u}||.||\\mathbf{v}||.\\cosh\\left(d_\\mathcal{H}(\\mathbf{u},\\mathbf{v})\\right),\\] in analogy to the geometric formulation of the Euclidean dot product. It’s fairly easy to show that \\(d_\\mathcal{H}\\) satisfies all the criteria to be a metric on the hyperboloid, but I won’t go into all the details here.\n\n\nHyperbolic Mandelbrot Set\n\nLorentz Transformations\nIn the first section we defined the Mandelbrot set in terms of translations and rotations. These operations are really maps from the plane \\(\\mathbb{R}^2\\) back to itself, such that the Euclidean distance between points does not change. To create a hyperbolic analogue we need similar transformations for hyperbolic space. The Lorentz group forms a set of transformations for \\(\\mathbb{L}^{n}\\) that preserves the hyperbolic distance function in exactly the way we need. There are three types of Lorentz transforms (not including the identity) that make up the group. Parabolic, hyperbolic, and elliptic.\nThe elliptic transformations behave essentially the same as Euclidean rotations, defined in terms of an angle. The transformation preserves both the distance between points and the distance between all points and the origin. In the case of the 2D hyperboloid model a rotation of \\(\\theta\\) looks like this, \\[\nR(\\theta) \\mathbf{u} = \\begin{bmatrix}\n\\cos(\\theta) & -\\sin(\\theta) & 0 \\\\\n\\sin(\\theta) &  \\cos(\\theta) & 0 \\\\\n0 & 0            &  1\n\\end{bmatrix} \\begin{bmatrix}\nu_1 \\\\ u_2 \\\\ u_3\n\\end{bmatrix}\n\\]\nThe hyperbolic transformations are similar to Euclidean translations along an axis. They preserve the distance between points, but not the distance between points and the origin. This type of transformation is called a boost and is defined in terms of a hyperbolic angle, also known as the rapidity. In the case of the 2D hyperboloid model a boost with rapidity \\(\\eta\\) looks like this: \\[\nT(\\eta) \\mathbf{u} = \\begin{bmatrix}\n\\cosh(\\eta) & 0 & \\sinh(\\eta) \\\\\n0 & 1 & 0 \\\\\n\\sinh(\\eta) & 0 & \\cosh(\\eta) \\\\\n\\end{bmatrix} \\begin{bmatrix}\nu_1 \\\\ u_2 \\\\ u_3\n\\end{bmatrix}\n\\]\nThe parabolic transformations don’t really have any analogue in Euclidean space, and so we won’t be using them. They do have use in the theory of special relativity and there they are often called null rotations. In case you’re interested, they look like this:\n\\[\nN(\\alpha) \\mathbf{u} = \\begin{bmatrix}\n1-\\frac{\\alpha^2}{2} &  -\\alpha & \\frac{\\alpha^2}{2} &\\\\\n\\alpha & 1 & -\\alpha\\\\\n-\\frac{a^2}{2} & -\\alpha & 1+\\frac{\\alpha^2}{2}\n\\end{bmatrix}\\begin{bmatrix}\nu_1 \\\\ u_2 \\\\ u_3\n\\end{bmatrix}\n\\]\n\n\nHyperbolic Analogue of the Orbit Function\nWe now use the above transformations to recreate the geometric process of Equation \\((1)\\), the orbit function for the Mandelbrot set, with hyperbolic transformations. We first replace Euclidean rotations with Lorentzian rotations and Euclidean translations with boosts. We define analogies to the polar coordinates of \\(\\mathbf{u}\\) in the following way, \\[u_\\eta = d_\\mathcal{H}(\\mathbf{u}, \\mathbf{0}),\\quad u_\\theta = \\mathop{\\text{arctan}}\\left(\\frac{u_2}{u_1}\\right). \\]\nThe result is the following construction for Equation \\((1)\\): Given a \\(\\mathbf{u}, \\mathbf{c} \\in \\mathcal{H}\\), calculate the point on \\(\\mathcal{H}\\) obtained by applying the following geometric process:\n\nTake the origin point, \\(\\mathbf{0} = (0,0,1)\\), and boost it by \\(u_\\eta^2\\).\nRotate around the origin by \\(2u_\\theta-c_\\theta\\).\nBoost by \\(c_\\eta\\).\nRotate around the origin by \\(c_\\theta\\).\n\nThe rest of the process of defining the Mandelbrot set remains the same. Note that the process can be trivially extended to other similar fractals based on orbit functions on the complex plane. For example, the method above can also be used to generate Julia set fractals.\n\n\n\nVisualisation\nThe Poincaré Disc model\nVisualising the hyperboloid model is difficult due to the fact that while the surface is two-dimensional, the hyperboloid itself lives in a three-dimensional Lorenz space. One option could be to simply visualise the hyperboloid surface in 3D, as if it were living in \\(\\mathbb{R^3}\\), and projecting down to your 2D screen in the standard way. However, this would make manipulating the view and getting an intuition for how hyperbolic space really behaves rather difficult since we lose any way to express the hyperbolic distance. Instead, we will project the hyperboloid model down to 2D using the Poincaré Disc model.\nIn this model the entire hyperboloid surface is stereoscopically projected to, and drawn inside, a circular disc. An interesting consequence of this is that you can see the entirety of the infinite surface all at once. It all “fits” because as you move towards the outer boundary the hyperbolic distance between points grows exponentially and features shrink away into nothingness. Using a Poincaré disc neatly demonstrates the different geometries possible in hyperbolic space. For example, you can easily show a tiling of the hyperbolic plane with heptagons while such a tiling is impossible in the Euclidean plane.\n\n\n\n\n\n\nStereoscopic projection from the hyperboloid model to the Poincaré disc, showing how a geodesic maps from one to the other. Created by Selfstudier.\n\n\n\n\n\n\n\nHeptagons uniformly tiling the hyperbolic plane, shown in the form of a Poincaré disc. Created by Anton Sherwood.\n\n\n\n\n\nThe process to stereoscopically project the hyperboloid model to the Poincaré disc is not too difficult. Starting with a point \\(\\mathbf{u}\\) on the hyperboloid, a line is drawn between \\(\\mathbf{u}\\) and \\(\\mathbf{N} = (0,0,-1)\\), intersecting the \\(z=0\\) plane at the required point \\(\\mathbf{p} = (p_1, p_2)\\) on the Poincaré disc. This procedure leads to the following relationship between the points \\(\\mathbf{u} = (u_1, u_2, u_3)\\) on the hyperboloid and \\(\\mathbf{p} = (p_1, p_2)\\) on the disc,\\[\\mathbf{p} = \\left( \\frac{u_1}{u_3+1},  \\frac{u_2}{u_3+1} \\right),\\quad \\mathbf{u} = \\frac{\\left(2p_1, 2p_2, 1+p_1^2+p_2^2\\right)}{1-p_2^2-p_2^2}.\\]\n\n\nHyperbolic Fractal Explorer\nI have created an interactive hyperbolic fractal explorer, shown below. Note that this demo runs using webGL and so the precision of the rotation calculations are fairly limited. The precision loss becomes readily apparent at higher levels of zoom. Nevertheless it’s a fun little demonstration of the ideas above.\nIn addition to the controls in the top right, click and drag to boost around. W will zoom in, S will zoom out and the A and D keys will also boost left and right.\n\n\n\n\n\n\nReferences\nIn addition to the links throughout, here is some more useful reading material.\n\nThe Hyperbolic plane: “A Strange New Universe”\nHyperbolic Geometry and Poincaré Embeddings\nStack Overflow: Is hyperbolic rotation really a rotation?\nWikipedia: Hyperbolic Space\nWikipedia: Poincare Disc\niq: The Main Bulb of the Mandelbrot Set\niq: Smooth Iteration Count for Generalized Mandelbrot Sets\nHyperogue: Models and projections of hyperbolic geometry"
  },
  {
    "objectID": "posts/webr_released/index.html",
    "href": "posts/webr_released/index.html",
    "title": "WebR 0.1.0 has been released",
    "section": "",
    "text": "This post was originally published as an article on the Tidyverse Blog.\nWe’re super excited to announce the release of webR v0.1.0! This is the first release of webR intended for general use by the web development and R communities and is the result of almost a year of hard work by the webR developers.\nThis post will introduce webR, demonstrate some of the possibilities that running R in a web browser brings, and give a quick overview of how to include webR in your own TypeScript or JavaScript web applications."
  },
  {
    "objectID": "posts/webr_released/index.html#introduction",
    "href": "posts/webr_released/index.html#introduction",
    "title": "WebR 0.1.0 has been released",
    "section": "Introduction",
    "text": "Introduction\nWebR is a version of the open-source R interpreter compiled for WebAssembly, along with a supporting TypeScript library for interacting with the console and R objects from a JavaScript environment.\nBy compiling R to WebAssembly a user can visit a website and run R code directly within the web browser, without R installed on their device or a supporting computational R server. All that is required is a normal web server, including the type of cloud hosting service provided by Github Pages or Netlify."
  },
  {
    "objectID": "posts/webr_released/index.html#how-it-works",
    "href": "posts/webr_released/index.html#how-it-works",
    "title": "WebR 0.1.0 has been released",
    "section": "How it works",
    "text": "How it works\nWebR’s core is based around compiling the open-source R interpreter for WebAssembly, using the Emscripten compiler suite along with LLVM Flang to work with R’s pre-existing C and Fortran based source code.\nWebAssembly (often abbreviated as Wasm) is a standard defining a virtual stack machine along with a corresponding bytecode. Efficient Wasm engines have already been implemented in most modern web browsers, which allows for the deployment of high performance Wasm applications on the web.\nWhile it’s certainly possible for an interested programmer to write Wasm bytecode by hand, it is not a requirement to do so. Similar to how code and data is compiled into machine code for a certain computer processor, code and data can be compiled into the Wasm bytecode by compiler software that supports the Wasm standard.\nHowever, unlike with traditional machine code, the Wasm virtual machine (VM) is consistent across multiple different types of environment, architecture, and device – in theory the same bytecode binary can run anywhere without having to be recompiled for that environment. In this way the Wasm VM is similar to Java’s JVM. However, in comparison to the JVM, Wasm has been designed and built from the ground up for use on the modern web, requiring strict sandboxing and security controls.\nFuture use for WebAssembly has also been identified in server-side web development, containerisation, cloud computing, and more. With these applications, Wasm has been suggested as a universal binary format of the future. Multiple implementations of the Wasm VM already exist designed to run outside a web browser, through proposed Wasm standards such as WASI."
  },
  {
    "objectID": "posts/webr_released/index.html#whats-possible",
    "href": "posts/webr_released/index.html#whats-possible",
    "title": "WebR 0.1.0 has been released",
    "section": "What’s possible?",
    "text": "What’s possible?\nUndoubtedly, webR opens a world of possibilities for the interactive use of R and data science on the web.\n\nAn online R console\nA web-based interactive R console is included in the webR source repository as a demonstration of integrating webR into a wider web application. A publicly accessible instance of the webR console can be found at https://webr.r-wasm.org/latest/.\n\nWith the webR online console a new user can get up and running with R in seconds. The webR console is also functional on many modern mobile devices, where traditional versions of R are not always available for installation at all1.1 I am aware of at least one early adopter using webR as a way to access R on their Apple iPad.\nIt’s possible to perform data analysis on reasonably large datasets by uploading data to a Virtual File System (VFS). The webR console provides an interface to view and interact with the VFS (Files tab, top right). Once a data file has been uploaded to the VFS it can be read by R like any standard file.\n\nNote that uploading and downloading files to the VFS in this way does not actually involve transferring any data over the network. However, webR has been built so that it is possible to load data into webR over the network by using R’s built in functions that can download from URL, such as read.csv()2.2 Note that there are some security measures in place when fetching data that are applied to all web applications. Downloading datasets from URL requires that the web server providing the data supports and allows Cross Origin Resource Sharing (CORS)\n\nPlotting is also supported (Plotting tab, top right), meaning a user can produce beautiful plot output with the webR console, closing the loop of reading data, performing analysis, and producing output. It is entirely feasible that a casual user could perform the basics of data science entirely within their web browser using webR.\n\n\nAn educational tool\nConsider the following code block containing some simple R code. After a short loading period while the webR binary and supporting files are downloaded, a Run code button is enabled on the code block, with the code itself able to be edited and remixed on the fly. Feel free to try this out now!\n\nLoading webR…\n\n\n\n\n\n\n\n\nAfter executing the R code once, try changing the am variable in the model to gear and then clicking Run code again. You should immediately see how changing the model affects the components of the resulting fit. There is a real R session running and powering this code block – try replacing the entire code with something new!\nThe following interactive code block produces an R plot that is directly embedded into the page. As with the previous example, the plot can be recreated or remixed multiple times by the reader simply by clicking the Run Code button.\n\nLoading webR…\n\n\n\n\n\n\n\n\nIn my experience this way of interacting and experimenting with R code without the mental overhead of context switching from a web browser to an R console, or copying and pasting lines of example code, feels extremely fresh and exciting. An exciting potential application for webR is providing high-quality educational web content in exactly this kind of format.\n\n\nReproducible reports\nA core principle of good science is that results should be repeatable and reproducible by others. Unfortunately the misuse of data analysis, leading to unreliable results, is a known issue.\nThe idea of a reproducible report is to bring the philosophy of repeatability to the delivery format itself. Reproducible reports weave together explanatory prose, data science, source code, output and figures; all in a single place with a consistent execution environment. With this, a user reading the report has everything they need to reproduce and confirm results for themselves.\nWhile Jupyter notebooks were not the first implementation of executable documents3, their popularity has grown over the last decade or so as a way to support high quality reproducible reports. Jupyter has been named “The data scientists’ computational notebook of choice” and almost 10 million Jupyter notebooks were publicly accessible on GitHub as of Oct 20204.3 Knuth originally introduced the precursor Literate Programming paradigm in 1984, and more recently tools such as Sweave, knitr and RMarkdown enable embedding R and computational results directly into a report.4 Admittedly, only a small proportion using an R kernel. The overwhelming majority use Python, R comes second, and Julia third.\nWhile a Jupyter notebook usually requires a Python and Jupyter installation to fully reproduce results, recent work by the JupyterLite team uses Wasm to bring Jupyter to the web browser. JupyterLite can be used with Pyodide to run Python based notebooks directly in the browser.\nWebR aims to provide that same experience for Jupyter notebooks based on R. As part of the initial release of webR, we are also releasing a webR kernel for JupyterLite, allowing users to write and execute reproducible Jupyter notebooks for R directly in the web browser.\nA JupyterLite instance with the webR kernel available can be found at https://jupyter.r-wasm.org/, along with a sample R Jupyter notebook demonstrating a reproducible report.\n\nThe JupyterLite kernel for R is still in the early stages of development and includes some limitations, but the core infrastructure is in place with the release of webR.\n\n\nR packages\nR has a rich history of user-created extensions through the use of R packages. Most packages are a combination of R and C or C++ code, and so many packages must be compiled from source for the system they are running on. Unfortunately, it is not possible to install packages in this way in webR. Such an installation process would require an entire C/C++ to WebAssembly compiler toolchain running in the web page!\nFor the moment, downloading pre-compiled Wasm binaries is the only supported way to install packages in webR. A pre-installed webr support package provides a helper function webr::install() which can be used to install packages from a CRAN-like repository. As part of the webR release we have provided a small repository of binary R packages compiled for Wasm, publicly hosted with URL https://repo.r-wasm.org/."
  },
  {
    "objectID": "posts/webr_released/index.html#using-webr-in-your-own-projects",
    "href": "posts/webr_released/index.html#using-webr-in-your-own-projects",
    "title": "WebR 0.1.0 has been released",
    "section": "Using webR in your own projects",
    "text": "Using webR in your own projects\nWebR aims to be as quick and easy to use as possible for those familiar with JavaScript web development. While a short introduction to using webR follows in this blog post, we think the best way to get up and running is by reading the Getting Started section of the webR documentation. The documentation goes into further detail about how to download webR, technical requirements for serving web pages that use webR, and provides more detailed examples.\n\nDownloading and using webR from npm\nFor a project with dependencies managed by npm, the webR JavaScript package can be installed by using the command,\nnpm i @r-wasm/webr\nOnce available, webR can be imported into a project and a new instance of webR initialised with,\nimport { WebR } from '@r-wasm/webr';\n\nconst webR = new WebR();\nawait webR.init();\nOnce a new instance of the WebR() class has been created, webR will begin to download WebAssembly binaries from the public CDN, and R will be started.\n\n\nDownloading webR release packages\nFull release packages for webR can also be downloaded from the webR GitHub Releases page. The full release packages include the webR JavaScript loader, along with WebAssembly binaries for R and its supporting libraries.\nHosting a full release package on a web server makes it possible to use webR entirely on your own infrastructure, rather than relying on downloading Wasm binaries from the public CDN.\n\n\nAn example of executing R code\nOnce R is ready, the JavaScript promise returned by webR.init() will resolve. At this point R code can be evaluated and results converted into JavaScript objects,\nlet result = await webR.evalR('rnorm(10,5,1)');\nlet output = await result.toArray();\nconsole.log(output);\nIn the above example the result object can be thought of as a reference to a specific R object, and is converted into a standard JavaScript array using the toArray() function.\nFurther examples and details of how to interact with the R console and work with R objects can be found in the webR documentation."
  },
  {
    "objectID": "posts/webr_released/index.html#the-future-of-webr",
    "href": "posts/webr_released/index.html#the-future-of-webr",
    "title": "WebR 0.1.0 has been released",
    "section": "The future of webR",
    "text": "The future of webR\nGoing forward we plan to expand and improve webR, including compiling more R packages for the webR public package repository. It is our hope that we can provide the same web-based computational infrastructure for R that Pyodide has provided for the Python ecosystem.\nWhile WebAssembly engines are in theory able to provide near-native performance, when it comes to the requirements for advanced data science or the deployment of sophisticated machine learning models, the benefits of running tools such as the RStudio IDE natively or a high-performance cloud deployment will likely always outperform the relatively restricted WebAssembly virtual machine. Despite this, webR can provide a smooth, interactive and immediate introduction to the world of working with data in R. Users who have not had the chance to use R in the past due to the barriers raised by the installation of new software to their workstation, or registration for a cloud-based service, might yet still be convinced to introduce R to their workflow though an introduction with interactive examples or short reports powered by webR.\nThe opportunity for enhancing educational content also continues beyond introductory materials. Many R packages are documented online, using automated tools such as pkgdown to produce a dedicated website for the package. Alongside an introductory description, package websites usually also include usage details in the form of example code, reference documentation, and vignette articles. However, if a potential user would like to try the package for themselves, often the only way is by installing the package onto their own machine. Immediately interactive examples, powered by webR, are an interesting future possibility that would reduce this kind of barrier to entry.\nFairly recently, the Shiny team announced Shiny for Python, a feature rich reactive web application framework targeting Python. Of particular note, the team used WebAssembly and Pyodide as a way to run a Shinylive server directly in the user’s web browser. One of the most exciting possible applications for webR is a similar architecture targeting the traditional R version of Shiny. Is it possible for a Shinylive for R to be powered by webR? We certainly hope so."
  },
  {
    "objectID": "posts/webr_released/index.html#acknowledgements",
    "href": "posts/webr_released/index.html#acknowledgements",
    "title": "WebR 0.1.0 has been released",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nA massive thank you to all early webR users for their willingness to experiment and their feedback in the form of GitHub issues and pull requests,\n@Anurodhyadav, @barryrowlingson, @christianp, @ekianjo, @georgestagg, @HTUser-1, @jason-variadiclabs, @jjesusfilho, @kdpsingh, @lionel-, @psychemedia, @Sjesc, @SugarRayLua @unclecode, and @wch."
  },
  {
    "objectID": "posts/diy_synth/index.html",
    "href": "posts/diy_synth/index.html",
    "title": "DIY FM synthesiser",
    "section": "",
    "text": "This post was originally published as a Twitter thread.\nFor anyone looking for an electronics/soldering project I can’t recommend this DIY OPL2 audio board enough. It comes with everything you need, is very fun to build, does not take too long and when you’re done you have an FM synthesiser to play with!\n\n\n\nThe OPL2 Audio Board by Cheerful Electronics.\n\n\nThe OPL2 (aka YM3812) was an FM synthesis chip from Yamaha. It has two oscillators, nine channels and a variety of parameters and effects to play with. It is well known for powering early IBM PC sound cards (e.g Adlib, 1987) and Yamaha’s PSR synths (e.g PSR-11/12 1986).\n\n\n\nAbove: Adlib sound board. Below: Yamaha PSR-12.\n\n\nOnce you’ve built the OPL2 board, you can hook it up to something like a Raspberry Pi or Arduino to drive it, and synthesise some FM style bleeps and bloops! The board has an audio out jack right there, and has an amplifier so you can plug headphones or speakers in.\nHere is an image of the board hooked up to an Arduino Nano clone, a cheap 1.8in TFT screen, and a keypad matrix. Using Arduino libraries for the board and the TFT screen, I wrote some Arduino code to create a DIY synthesiser.\n\n\n\nOPL2 Audio Board, keypad matrix, Arduino Nano clone, and TFT screen showing an instrument editor screen.\n\n\nHere is a video showing my Instrument Editor. The graphical interface is drawn to the screen using the Arduino TFT library and from there you can use the attached keypad matrix to edit the FM parameters and play notes (using the OPL2 library).\n\n\n\n\n\n\n\n\n\nAlthough much less developed, here is a Pattern Editor page I never quite finished. The idea here was to create something very similar to old school tracker software, inputting notes for each channel into the pattern editor and playing patterns back to create music.\n\n\n\nThe pattern editor screen.\n\n\nEagle eyed viewers might notice the SD card plugged into the screen. The Arduino uses SPI to talk to everything: the TFT screen, the OPL2 board, and that SD card. The OPL2 instrument parameters and tracker patterns are saved and read back directly to the SD card in this way.\n\n\n\nA closer look at the TFT board, including it’s SD card reader slot.\n\n\nSince the OPL2 was used to create sound expansion cards for the IBM PC in the 80s, if you have any old tracker files lying around the OPL2 library can actually play them direct from the SD card. Here is a random one that I found on the web.\n\nAnd here’s a fun version of Popcorn! Apologies for the secondhand recording of the audio rather than direct line-in. The OPL2 sounds amazing in person. Well, if you’re into that kind of thing…"
  },
  {
    "objectID": "posts/calculator_forth/index.html",
    "href": "posts/calculator_forth/index.html",
    "title": "Forth on a calculator",
    "section": "",
    "text": "This post was originally published as a Twitter thread.\nUpdate: Since originally posting this, I’ve seen a video on YouTube discussing colour LCD displays which briefly mentions this family of calculators. It, along with many other videos on the same channel, is wonderful to watch.\n\nI’m currently suffering with Covid-19. In “celebration”, here is a twitter thread describing my Covid lockdown project: hacking a Casio CFX-9850G calculator, from 1996 with 32KB of RAM and a 128x64 LCD screen, to run custom machine code.\n\n\n\nMy CFX-9850G graphing calculator.\n\n\nWhy? It all began when a friend of mine told me he prefers using the dc command over bc, as he is used to using reverse polish notation (RPN) on his calculator. My CFX-9850G, on the other hand, uses the more common infix notation. A comparison is shown here.\n\n\n\nThe bc and dc CLI calculators.\n\n\nThe CFX-9850G supports programming with Casio BASIC, which suppose I could have used, but it’s slow. To do this properly meant learning about how the calculator CPU works and somehow running my own machine code on the thing.\nI tried to learn as much as I could about the hardware. I found a service manual and partial documentation of the calculator’s CPU by Martin Poupe at http://martin.poupe.org/casio/. This was super helpful and confirmed that it was indeed possible to run custom code.\nI took apart the calculator and removed the ROM chip (a NEC branded 23C400). The plan was to dump the ROM, and then later solder in a new chip programmed with modified data. It took a few attempts to get a clean ROM dump, mostly due to my shoddy soldering. In retrospect, it would have been much easier to just use an adapter board or ZIF socket/clip.\n\n\n\nLeft: The CFX-9850G’s motherboard, ROM removed. Right: The NEC branded 23C400 SOIC chip, wires soldered to each pin.\n\n\nI was able to dump the ROM using a universal EEPROM programmer, the widely available MiniPro TL866.\nNow that I had a ROM dump, I could start seeing how the calculator’s built in OS works. Based on Martin’s previous work, I started writing a disassembler for the calculator’s Hitachi HCD62121 so that I could convert the ROM data into readable assembly listings.\nAt the same time, I amazingly found a partial implementation of the CPU in MAME’s source code, again based on work by Martin Poupe. Unfortunately, the MAME emulation didn’t work with my ROM, just showing a blank screen or crashing.\nSo, I made my own emulator. I used the partially working MAME core as a base, along with Martin’s CPU information and the Casio service manual to understand how the CPU, ROM, display and keypad all work together. The right side of the screen shows the CPU and RAM internals of the machine, along with controls to step through individual instructions, providing a simple debugger.\n\n\n\nThe CFX emulator I created as a sandbox for experimentation.\n\n\nI then used the emulator to watch things as my ROM dump booted, tweaking the emulation until it finally worked. IIRC the problem was due to timing/sleep issues causing the calculator to immediately just turn off. Normally it does that after about 5 minutes to save power!\n\n\n\nCasio’s calculator OS, as dumped from my calculator’s ROM chip, running on the CFX emulator.\n\n\nWith a working emulator I could patch the ROM and test custom machine code. I patched my ROM to replace one of the Casio BASIC commands with a new one. That new command was programmed to jump to a specific location in RAM and then run whatever is there.\nAt this point I bought some new blank AT27C040 chips from AliExpress. They are pin-compatible with the ROM chip I pulled from the calculator, and can be programmed with a EEPROM programmer.\n\n\n\nWriting a custom ROM for the calculator using the TL866 programmer. I do wish that board had fit directly into the ZIF socket, so that I could avoid all the wires. Alas, it was slightly too wide.\n\n\nYou’ll notice I’ve also switched from directly soldering to the EEPROM chip to using an adapter board instead. I burned in my patched ROM and soldered the chip back into the calculator. It booted!\nNow, how do we get our new custom machine code into the calculator’s RAM so it can run? Well, back in the day Casio provided software to back up the calculator’s memory. Using this, we can write to RAM!\n\n\n\nA screenshot of the CASIO FA-122 Program-link software. Copyright 1996 but still runs fine on Windows 10.\n\n\nIt turns out that the backup format is essentially just a hex dump of the calculator’s entire RAM, written in ASCII. So, we can add whatever we like by taking a calculator backup, patching the “data record”, then uploading it back to the calculator.\n\n\n\nThe Casio Program-link backup format.\n\n\nI don’t have the correct Program-link cable to plug into the calculator, but that’s nothing a Teensy and 2.5mm jack can’t fix. The calculator communicates with the PC using a serial signal. Here the Teensy is just acting as a RS-232 serial to USB converter.\n\n\n\nA Teensy 2.0 USB development board and a 2.5mm TRS jack that plugs into the bottom of the calculator.\n\n\nWriting code for the calculator was a pain. I didn’t want to work with machine code directly, so writing an assembler was the way to go. David Salomon’s Assemblers And Loaders (1993) book was an incredible help with that.\nI wrote a two-pass assembler in C, using flex and bison for lexing and parsing custom assembly code. The assembler produces what I’ve called an out.bin binary object file, which is similar to Unix’s old a.out format, containing the assembled machine code.\n\n\n\nhcdasm, an assembler for the calculator’s custom CPU.\n\n\nI also wrote a linking loader that takes multiple out.bin formatted files from the assembler, links and relocates the machine code, sets up a specific entry point in the correct place, and finally builds a new RAM image ready to upload to the calculator.\n\n\n\nhcdld, a linking loader that takes assembled objects and builds a RAM image for the calculator containing executable code.\n\n\n\n\n\nFun fact: As far as I can tell, the calculator’s CPU can’t do multiplication by itself. I had to implement my own integer multiplication algorithm in assembly.\n\n\nMy first assembled program running on the actual hardware (that did anything interesting, anyway) was Conway’s Game of Life. This video was taken just after Conway died 😢 I’ve just checked, the source was 263 lines of assembly. It runs so much quicker than Casio BASIC code.\n\nNext I made routines for writing text to screen. I store the data for a 4x6 pixel font in RAM, so that I can fit more characters on screen than in the default OS. At this point everything running is my own code, so it’s a bit like writing an OS from scratch.\n\n\n\n\n“Text rendering” to the calculator’s built in LCD, by writing pixels corresponding to a custom font directly to memory-mapped VRAM.\n\n\n\nAt this point it was time for me to write a RPN interpreter. However, I decided to go a fair step further than that and implement a forth environment for the calculator, which works in RPN style by default. Forth is a wonderful language. You might think C is bare-bones, but it’s got nothing on forth. You can bootstrap up to an entire interactive programming environment by implementing a surprisingly few number of forth primitives in assembly.\nJonesforth is a minimal forth interpreter written in i386 assembly. The source code is written in a literate programming style and is an absolute joy to read from start to finish.\nI ported Jonesforth from i386 to the custom assembly code for the calculator. It came out to about 1000 lines of assembly on top of the display code. Some of the code is stored directly as ASCII in RAM, and compiled by the forth compiler on startup!\n\n\n\nThe point in the source at which enough assembly primitives are in place that we can start just writing Forth code directly.\n\n\nAnd finally, after uploading the assembled forth interpreter to my calculator’s RAM: here is a video showing the result of a calculation that was input using RPN! Apologies for the poor video recording, the calculator screen has dimmed due to age and is extremely hard to film."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Dr George W Stagg",
    "section": "",
    "text": "Open Source Software Engineer @ Posit Software, PBC.\nLead Developer of the webR project."
  },
  {
    "objectID": "publications.html",
    "href": "publications.html",
    "title": "Publications",
    "section": "",
    "text": "Automatic assessment of mathematical programming exercises with Numbas\nC. Graham, G. Stagg, C. Lawson-Perfect, A. Khan\nMSOR Connections 21, 1 (2023)\nA Prolog assisted search for new simple Lie algebras\nD. Cushing, G. W. Stagg, D. I. Stewart\narXiv:2207.01094 [math.RA], (2022)\nThe Graph Curvature Calculator and the curvatures of cubic graphs\nD. Cushing, R. Kangaslampi, V. Lipiäinen, S. Liu, G. W. Stagg\nExperimental Mathematics 31, 2 (2022)\nQuasiperiodic boundary conditions for three-dimensional superfluids\nToby S. Wood, Mae Mesgarnezhad, George W. Stagg, Carlo F. Barenghi\nPhys. Rev. B 100, 024505 (2019)\nQuantum ferrofluid turbulence\nT. Bland, G. W. Stagg, L. Galantucci, A. W. Baggaley, N. G. Parker\nPhys. Rev. Lett. 121, 174501 (2018)\nVortex scattering by impurities in a Bose-Einstein condensate\nA. Griffin, G. W. Stagg, N. P. Proukakis and C. F. Barenghi\nJ. Phys. B: At. Mol. Opt. Phys. 50, 115003 (2017)\nSuperfluid boundary layer\nG. W. Stagg, N. G. Parker, C. F. Barenghi\nPhys. Rev. Lett. 118, 0135301 (2017)\nUltraquantum turbulence in a quenched homogeneous Bose gas\nG. W. Stagg, N. G. Parker, and C. F. Barenghi\nPhys. Rev. A 94, 053632 (2016)\nCritical velocity for vortex nucleation in a finite-temperature Bose gas\nG. W. Stagg, R. W. Pattinson, C. F. Barenghi, N. G. Parker\nPhys. Rev. A 93, 023640 (2016)\nGeneration and Decay of 2D Quantum Turbulence in a Trapped Bose-Einstein Condensate\nG. W. Stagg, A. J. Allen, N. G. Parker, and C. F. Barenghi\nPhys. Rev. A 91, 013612 (2015)\nQuantum analogues of classical wakes in Bose-Einstein condensates\nG. W. Stagg, N. G. Parker and C. F. Barenghi\nJ Phys B: At. Mol. Opt. Phys. 47, 095304 (2014)"
  },
  {
    "objectID": "publications.html#research-articles",
    "href": "publications.html#research-articles",
    "title": "Publications",
    "section": "",
    "text": "Automatic assessment of mathematical programming exercises with Numbas\nC. Graham, G. Stagg, C. Lawson-Perfect, A. Khan\nMSOR Connections 21, 1 (2023)\nA Prolog assisted search for new simple Lie algebras\nD. Cushing, G. W. Stagg, D. I. Stewart\narXiv:2207.01094 [math.RA], (2022)\nThe Graph Curvature Calculator and the curvatures of cubic graphs\nD. Cushing, R. Kangaslampi, V. Lipiäinen, S. Liu, G. W. Stagg\nExperimental Mathematics 31, 2 (2022)\nQuasiperiodic boundary conditions for three-dimensional superfluids\nToby S. Wood, Mae Mesgarnezhad, George W. Stagg, Carlo F. Barenghi\nPhys. Rev. B 100, 024505 (2019)\nQuantum ferrofluid turbulence\nT. Bland, G. W. Stagg, L. Galantucci, A. W. Baggaley, N. G. Parker\nPhys. Rev. Lett. 121, 174501 (2018)\nVortex scattering by impurities in a Bose-Einstein condensate\nA. Griffin, G. W. Stagg, N. P. Proukakis and C. F. Barenghi\nJ. Phys. B: At. Mol. Opt. Phys. 50, 115003 (2017)\nSuperfluid boundary layer\nG. W. Stagg, N. G. Parker, C. F. Barenghi\nPhys. Rev. Lett. 118, 0135301 (2017)\nUltraquantum turbulence in a quenched homogeneous Bose gas\nG. W. Stagg, N. G. Parker, and C. F. Barenghi\nPhys. Rev. A 94, 053632 (2016)\nCritical velocity for vortex nucleation in a finite-temperature Bose gas\nG. W. Stagg, R. W. Pattinson, C. F. Barenghi, N. G. Parker\nPhys. Rev. A 93, 023640 (2016)\nGeneration and Decay of 2D Quantum Turbulence in a Trapped Bose-Einstein Condensate\nG. W. Stagg, A. J. Allen, N. G. Parker, and C. F. Barenghi\nPhys. Rev. A 91, 013612 (2015)\nQuantum analogues of classical wakes in Bose-Einstein condensates\nG. W. Stagg, N. G. Parker and C. F. Barenghi\nJ Phys B: At. Mol. Opt. Phys. 47, 095304 (2014)"
  },
  {
    "objectID": "education.html",
    "href": "education.html",
    "title": "Education",
    "section": "",
    "text": "Newcastle University\nThesis: A Numerical Study of Vortices and Turbulence in Quantum Fluids\nSupervisors: Prof. Carlo Barenghi & Prof. Nick Parker\n\n\n\nNewcastle University\nDissertation: The Movement of a Fractal Through a Bose-Einstein Condensate\nSupervisor: Prof. Carlo Barenghi"
  },
  {
    "objectID": "education.html#qualifications",
    "href": "education.html#qualifications",
    "title": "Education",
    "section": "",
    "text": "Newcastle University\nThesis: A Numerical Study of Vortices and Turbulence in Quantum Fluids\nSupervisors: Prof. Carlo Barenghi & Prof. Nick Parker\n\n\n\nNewcastle University\nDissertation: The Movement of a Fractal Through a Bose-Einstein Condensate\nSupervisor: Prof. Carlo Barenghi"
  },
  {
    "objectID": "education.html#teaching-experience",
    "href": "education.html#teaching-experience",
    "title": "Education",
    "section": "Teaching Experience",
    "text": "Teaching Experience\n\nNewcastle University — School of Mathematics & Statistics\n\nPHY1030: Introduction to Python for Laboratory Physics (2020–2022)\nMAS2502: Introduction to Computing and Problem Solving (2018–2020)\nMathematical Typesetting with \\(\\mathrm\\LaTeX\\) (2016–2021)\nIntroduction to R & MATLAB (2016–2021)\nIntroduction to Linux (2018–2020)"
  },
  {
    "objectID": "education.html#research-experience",
    "href": "education.html#research-experience",
    "title": "Education",
    "section": "Research Experience",
    "text": "Research Experience\n\nTheoretical Physics\n\nSuperfluidity & quantum turbulence\nVortex fluid dynamics\nUltra-cold gasses & Bose-Einstein condensation\n\n\n\nComputational Mathematics\n\nDiscrete graph curvature\nFinite-characteristic Lie algebras\n\n\n\nResearch Software Engineering\n\nHPC software engineering & system administration\nLarge scale parallel computing with MPI & OpenMP\nAuthenticaiton management with Kerberos & SSSD\nStorage server management (CIFS/NFS) using Illumos & ZFS"
  },
  {
    "objectID": "education.html#digital-learning",
    "href": "education.html#digital-learning",
    "title": "Education",
    "section": "Digital Learning",
    "text": "Digital Learning\n\nAssessment in the mathematical sciences\nEffective computing & software pedagogy\nWeb content delivery & accessibility for mathematical sciences"
  },
  {
    "objectID": "software.html",
    "href": "software.html",
    "title": "Software & Demos",
    "section": "",
    "text": "WebR\nThe statistical language R compiled into Wasm for use in a browser, via Emscripten.\n GitHub  Website\n\n\n\n\n\n\n\n\nGraph Curvature Calculator\nA web tool for calculating curvature of graphs under various discrete curvature notions.\n GitHub  Website\n\n\n\n\n\n\n\n\n\n2D-GP\nA Fortran project that numerically solves the Gross-Pitaevskii Equation in 2D using OpenMP.\n GitHub\n\n\n\n\n\n\n\n\n3D-GP-MPIOMP\nA Fortran project that numerically solves the Gross-Pitaevskii Equation in 3D using MPI and OpenMP.\n GitHub\n\n\n\n\n\n\n\n\n\nDouble Spherical Pendulum\nClassical physics simulation of a double pendulum with spherical joints and masses otherwise free to move in 3D.\n GitHub  Website\n\n\n\n\n\n\n\n\nWebGL GPE\nA WebGL implementation of a 2D Gross-Pitaevskii Equation numerical solver. The solver runs in real time and is directly interactive.\n GitHub  Website\n\n\n\n\n\n\n\n\n\nHyperbolic Fractals\nDefining the Mandelbrot set on a Poincare disc. Includes an interactive hyperbolic fractal explorer.\n Read Post\n\n\n\n\n\n\n\n\nPrimes!\nTap the tiles to pop out the lowest prime factor. Adjacent primes disappear! Try to clear the board.\n GitHub  Website\n\n\n\n\n\n\n\n\n\nDouble Torus Snake\nSnake, but played on a double torus. An experiment in working with Wasm & Emscripten.\n GitHub  Website\n\n\n\n\n\n\n\n\nTensor Tic Tac Toe\nA meta-game based on Tic Tac Toe. The meta-game is made up of 9 smaller games of Tic Tac Toe.\n GitHub  Website"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Posts",
    "section": "",
    "text": "WebR 0.1.0 has been released\n\n\n\n\n\n\n\nprogramming\n\n\nr\n\n\nwasm\n\n\n\n\nWebR 0.1.0 has been released! Using the magic of WebAssembly, webR allows you to run R code directly within a web browser.\n\n\n\n\n\n\nMar 9, 2023\n\n\nGeorge Stagg\n\n\n\n\n\n\n  \n\n\n\n\nAn R grammar experiment\n\n\n\n\n\n\n\nhacks\n\n\nr\n\n\nprogramming\n\n\n\n\nHacking at R’s grammar so as to allow for JSX-style XML tags.\n\n\n\n\n\n\nFeb 7, 2023\n\n\nGeorge Stagg\n\n\n\n\n\n\n  \n\n\n\n\nDIY FM synthesiser\n\n\n\n\n\n\n\nprogramming\n\n\naudio\n\n\nhardware\n\n\n\n\nBuilding a DIY FM synthesiser, based on an Yamaha OPL2 and electronic audio kit.\n\n\n\n\n\n\nJun 22, 2022\n\n\nGeorge Stagg\n\n\n\n\n\n\n  \n\n\n\n\nForth on a calculator\n\n\n\n\n\n\n\nhacks\n\n\nretro\n\n\nhardware\n\n\nprogramming\n\n\n\n\nHacking a Casio CFX-9850G calculator to run custom machine code.\n\n\n\n\n\n\nApr 3, 2022\n\n\nGeorge Stagg\n\n\n\n\n\n\n  \n\n\n\n\nHyperbolic fractals\n\n\n\n\n\n\n\nmaths\n\n\nwebgl\n\n\n\n\nThe Mandelbrot Set living on a Poincaré disc.\n\n\n\n\n\n\nJun 27, 2021\n\n\nGeorge Stagg\n\n\n\n\n\n\nNo matching items"
  }
]